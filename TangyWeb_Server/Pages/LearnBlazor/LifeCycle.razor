@page "/learnblazor/lifecycle"

<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<hr />
    @Count <button @onclick="StartCountDown">Start Countdown</button>

<div class="row mt-2">
    @for (int i = 0; i < lifecycleMessages.Count; i++)
    {
        <p>@($"{@i}- {@lifecycleMessages[i]}")</p>
    }
</div>

<div class="border">
    <_LifeCycleChild CurrentValue="@currentCount"></_LifeCycleChild>
</div>

@code {
    private int currentCount = 0;
    private int Count { get; set; } = 5;
    private List<string> lifecycleMessages = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        lifecycleMessages.Add("OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        lifecycleMessages.Add("OnInitializedAsync");
    }

    protected override void OnParametersSet()
    {
        lifecycleMessages.Add("OnParametersSet");
    }

    protected override async Task OnParametersSetAsync()
    {
        lifecycleMessages.Add("OnParametersSetAsync");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        lifecycleMessages.Add("OnAfterRender");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        lifecycleMessages.Add("OnAfterRenderAsync");
    }

    protected override bool ShouldRender()
    {
        lifecycleMessages.Add("ShouldRender");
        return true;
    }

    void StartCountDown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}

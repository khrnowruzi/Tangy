@page "/product/create"
@page "/product/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<div class="row my-2">
    <h3 class="cart-title text-primary mb-3 m-lg-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <div class="from-group">
                    <label>Name</label>
                    <InputText @bind-Value="@Product.Name" class="form-control" />
                    <ValidationMessage For="()=>Product.Name" />
                </div>
                <div class="from-group">
                    <label>Color</label>
                    <InputText @bind-Value="@Product.Color" class="form-control" />
                    <ValidationMessage For="()=>Product.Color" />
                </div>
                <div class="from-group">
                    <label>Description</label>
                    <InputTextArea @bind-Value="@Product.Description" class="form-control" />
                    <ValidationMessage For="()=>Product.Description" />
                </div>

                <div class="row mt-2">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="@Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="@Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <InputSelect @bind-Value="@Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select Category--</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId" />
                    </div>
                    <div class="form-group col-6">
                        <InputFile OnChange="HandleImageUplad"></InputFile>
                    </div>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100" />
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    public ProductDTO Product { get; set; } = new()
        {
            ImageUrl = "/images/default.png"
        };
    public IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Product = await _productRepository.Get(Id);
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            //create
            await _productRepository.Create(Product);
        }
        else
        {
            //update
            await _productRepository.Update(Product);
        }
        _navigationManager.NavigateTo("product");
    }

    private async Task HandleImageUplad(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                    fileInfo.Extension.ToLower() == ".png" ||
                    fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
